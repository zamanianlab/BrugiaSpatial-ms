theme_set(theme_cowplot(font_family = "Helvetica") +
theme(text = element_text(colour = "white")))
Fig3 <- plot_grid(Fig3a, NULL, Fig3b, NULL, Fig3c, nrow = 1, labels = c('A','','B','','C'), rel_widths = c(0.6,0.04,1,0.04,1), scale = 0.99)
ggsave("Fig3.pdf", Fig3, width =14, height = 8, units = "in", bg = "black")
nuclei.ls.stats <- nuclei.ls
View(nuclei.ls.plot)
View(nuclei.ls.stats)
View(nuclei.ls.stats)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(Nuclei))
# nuclei density stats (ls)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n())
View(nuclei.ls)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance))
View(nuclei.ls.stats)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance)) %>%
mutate(nuclei.dens = nuclei.total / dist.total)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance), Sex = Sex) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
mean.cryo = mean(nuclei.cryo.stats$nuclei.mean) #10.15
sd.cryo = sd(nuclei.cryo.stats$nuclei.mean)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance), Sex = max(Sex)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
# nuclei density stats (ls)
nuclei.ls.stats <- nuclei.ls %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance), Sex = first(Sex)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
nuclei.ls.stats <- nuclei.ls %>%
filter(Sex == "Female")
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance), Sex = first(Sex)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
nuclei.ls.stats <- nuclei.ls %>%
filter(Sex == "Female") %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance), Sex = first(Sex)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
nuclei.ls.stats <- nuclei.ls %>%
filter(Sex == "Female") %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
nuclei.ls.stats <- nuclei.ls %>%
filter(Sex == "Male") %>%
group_by(Worm) %>%
summarise(nuclei.total = n(), dist.total = max(Distance)) %>%
mutate(nuclei.dens = 20*(nuclei.total / dist.total))
mean.ls.male = mean(nuclei.ls.stats$nuclei.dens) #10.15
sd.ls.male = sd(nuclei.ls.stats$nuclei.dens) #1.46
mean.ls.male
sd.ls.male
library(tidyverse)
library(cowplot)
library(ggrepel)
library("ZamanianLabThemes")
library(paletteer)
library(DESeq2)
library(wesanderson)
library(viridis)
library(ggdendro)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("ggtree")
#BiocManager::install("treeio")
library(ggtree)
library(treeio)
setwd("~/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/Figures/Figure4")
theme_zlab_white = function(base_size = 12, base_family = "Helvetica") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme( #top right bottom left
# Specify axis options
axis.line = element_blank(),
#axis.line = element_line(color = "black"),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.4),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(5, 0, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "white"),
legend.key = element_rect(color = "white",  fill = "white"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, hjust = 0, color = "black"),  #face = "bold",
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "white", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
#panel.border = element_blank(),
#panel.grid.major = element_line(color = "black"),
panel.grid.major = element_blank(),
#panel.grid.minor = element_line(color = "black"),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
# Specify faceting options
strip.background = element_rect(fill = "white", color = "white"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(colour = NA, fill = NA),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
library(magick)
library(pdftools)
library(grConvert)
library(grImport2)
RNA.illustration <- image_read_pdf("~/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/RNAseq/RNA_Tomography/Illustration_RNAt.pdf", density = 600)
Fig4.ill <- ggdraw() +
draw_image(RNA.illustration, scale = 1)
run_stats <- readRDS("data/run_stats.rds") %>%
filter(metric == "unique_perc")
View(run_stats)
# read in raw gene counts
counts <- readRDS("data/counts.raw.rds")
# filter for rep and id robustly expressed genes and slices
quality_filter <- function (rep.filter) {
counts <- readRDS("data/counts.raw.rds") %>% filter(rep == rep.filter) %>% arrange(sample)
counts$sample <- factor(as.numeric(counts$sample))
counts <- counts %>%
dplyr::mutate(rep_sample = paste0(rep,"_",sample)) %>%
dplyr::select(gene_id, rep_sample, expression) %>%
pivot_wider(names_from = rep_sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
#gene filter 1 (require x reads across all samples)
keep <- rowSums(counts) > 20
counts <- counts[keep,]
#gene filter 2 (require x reads in each of at least y samples)
keep <- rowSums(counts > 10) >= 1
counts <- counts[keep,]
#surviving genes
gene_list <- unique(rownames(counts))
#slice filter (require x reads in each of at least y genes) - transpose
counts.t <- t(counts)
keep <- rowSums(counts.t > 10) >= 100
slice_list <- colnames(counts[,keep])
#export
filtered <- list("gene_list" = gene_list, "slice_list" = slice_list)
return(filtered)
}
r1.read.avg <- run_stats %>% filter(rep == "R1", sample > 11)
r1.read.avg <- run_stats %>% filter(rep == "R1", sample > "11")
run_stats$sample <- as.numeric(run_stats$sample)
r1.read.avg <- run_stats
r1.read.avg$sample <- as.numeric(r1.read.avg$sample)
r1.read.avg <- r1.read.avg %>% filter(rep == "R1", sample > "11")
View(r1.read.avg)
r1.read.avg <- run_stats
r1.read.avg$sample <- as.numeric(r1.read.avg$sample)
r1.read.avg <- r1.read.avg %>% filter(rep == "R1", sample > 11)
r1.read.avg <- mean(r1.read.avg$value)
r1.read.sd <- sd(r1.read.avg$value)
r1.read.avg <- run_stats
r1.read.avg$sample <- as.numeric(r1.read.avg$sample)
r1.read.avg <- r1.read.avg %>% filter(rep == "R1", sample > 11)
r1.read.m <- mean(r1.read.avg$value) #70%
r1.read.sd <- sd(r1.read.avg$value)
# read in raw gene counts
counts <- readRDS("data/counts.raw.rds")
# filter for rep and id robustly expressed genes and slices
quality_filter <- function (rep.filter) {
counts <- readRDS("data/counts.raw.rds") %>% filter(rep == rep.filter) %>% arrange(sample)
counts$sample <- factor(as.numeric(counts$sample))
counts <- counts %>%
dplyr::mutate(rep_sample = paste0(rep,"_",sample)) %>%
dplyr::select(gene_id, rep_sample, expression) %>%
pivot_wider(names_from = rep_sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
#gene filter 1 (require x reads across all samples)
keep <- rowSums(counts) > 20
counts <- counts[keep,]
#gene filter 2 (require x reads in each of at least y samples)
keep <- rowSums(counts > 10) >= 1
counts <- counts[keep,]
#surviving genes
gene_list <- unique(rownames(counts))
#slice filter (require x reads in each of at least y genes) - transpose
counts.t <- t(counts)
keep <- rowSums(counts.t > 10) >= 100
slice_list <- colnames(counts[,keep])
#export
filtered <- list("gene_list" = gene_list, "slice_list" = slice_list)
return(filtered)
}
gene_list_r1 <- quality_filter("R1")$gene_list #8870
gene_list_r2 <- quality_filter("R2")$gene_list #6253
gene_list_r3 <- quality_filter("R3")$gene_list #8138
gene_list_r13 <- intersect(gene_list_r1,gene_list_r3) #7676
gene_list_r123 <- intersect(gene_list_r13,gene_list_r2) #5810
res.df <- readRDS("deg/ht.res.rds")
library(tidyverse)
library(cowplot)
library(ggrepel)
library("ZamanianLabThemes")
library(paletteer)
library(DESeq2)
library(hexbin)
library(wesanderson)
setwd("~/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/Figures/Figure1")
theme_zlab_white = function(base_size = 12, base_family = "Helvetica") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
#axis.line = element_line(color = "black"),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.4),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "white"),
legend.key = element_rect(color = "white",  fill = "white"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "black"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "white", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
#panel.border = element_blank(),
#panel.grid.major = element_line(color = "black"),
panel.grid.major = element_blank(),
#panel.grid.minor = element_line(color = "black"),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
# Specify faceting options
strip.background = element_rect(fill = "white", color = "white"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(colour = NA, fill = NA),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
############
## FIG 1A Illustration of Head/Body dissection
############
library(magick)
library(pdftools)
library(grConvert)
library(grImport2)
illust.hb <- image_read_pdf("~/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/RNAseq/HeadBody/Illustration_HeadBody.pdf", density = 600)
Fig1a <- ggdraw() +
draw_image(illust.hb, scale = 1)
############
## FIG 1B/C Head/Body RNAseq analysis (B = volcano + pca; C = annotated heat map)
############
########################################################
####### READ IN AND SAVE RAW/TPM counts (Head vs Tail)
########################################################
RNAdata <- c("~/Box/ZamanianLab/SeqLibraries/Mapping/")
dir <- c("O001_BmAF_HT/190114_BCCV49ANXX/")
counts_dir <- paste0(RNAdata,dir,"counts/")
sample_list <- list.files(path = counts_dir, full.names = FALSE, recursive = TRUE)
#pull in gtf file of gene_ids and lengths
gtf <- read.csv(paste0(RNAdata,"auxillary/Bma.geneset.csv"), header=F)
colnames(gtf) <- c("chr","start","end","strand","gene_id")
gtf <- gtf %>% mutate(gene_len = abs(end-start)) %>% select(gene_id,gene_len)
#create blank count table using first sample file to pull gene ids
counts <- read.csv(paste0(counts_dir,sample_list[1]), header=F, sep="\t") %>% dplyr::slice(-(1:4)) %>% select(1)
colnames(counts) <- c("gene_id")
#populate raw and tpm counts table
counts.raw <- counts
counts.tpm <- counts
for (i in sample_list){
print(i)
counts.i <- read.csv(paste0(counts_dir,i), header=F, sep="\t") %>% dplyr::slice(-(1:4))
colnames(counts.i) <- c("gene_id","count")
#add tpm column
counts.i <- left_join(counts.i, gtf, by = "gene_id") %>%
mutate(rpk = count / (1000*gene_len))
rpk_sum <- sum(counts.i$rpk, na.rm=TRUE)
counts.i <- counts.i %>%
mutate(tpm = 1000000*rpk / rpk_sum) %>%
select(gene_id,count,tpm)
#add raw count and tpm data to dfs
i <- str_replace(i, ".ReadsPerGene.tab","")
counts.raw.i <- counts.i %>% select(gene_id,count)
colnames(counts.raw.i) <- c("gene_id",i)
counts.raw <- left_join(counts.raw,counts.raw.i, by = "gene_id")
counts.tpm.i <- counts.i %>% select(gene_id,tpm)
colnames(counts.tpm.i) <- c("gene_id",i)
counts.tpm <- left_join(counts.tpm,counts.tpm.i, by = "gene_id")
}
# switch to long and add meta data
counts.raw <- counts.raw %>%
pivot_longer(2:ncol(counts.raw),
names_to = c("sample"),
names_pattern = ".*?_(.*?)_.*",
values_to = "expression")
counts.tpm <- counts.tpm %>%
pivot_longer(2:ncol(counts.tpm),
names_to = c("sample"),
names_pattern = ".*?_(.*?)_.*",
values_to = "expression")
# export
counts.raw$sample <- factor(counts.raw$sample)
saveRDS(counts.raw, "counts/ht.raw.rds")
counts.tpm$sample <- factor(counts.tpm$sample)
saveRDS(counts.tpm, "counts/ht.tpm.rds")
##########################################
### Prep raw counts for DESEQ2 analysis of AF H/T
##########################################
# read in counts (raw) and filter for samples
counts.raw <- readRDS("counts/ht.raw.rds")
# convert to matrix
counts.raw <- counts.raw %>%
pivot_wider(names_from = sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
# make metadata file
sample_list <- colnames(counts.raw)
samples <- data.frame("sample" = sample_list, stringsAsFactors = FALSE)
samples <- samples %>%
mutate(cond = rep(c("Head", "Body"), times = 3)) %>%
mutate(worm = c("1","1","2","2","3","3"))
samples$cond <- as.factor(samples$cond)
samples$worm <- as.factor(samples$worm)
saveRDS(samples, "deg/samples-ht.rds")
# read in sample metadata df > samples
samples <- readRDS("deg/samples-ht.rds")
##########################################
## Transform and Cluster Samples
##########################################
gene_count <- as.matrix(counts.raw)
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
#filter 1 (require x reads total across all samples)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
#filter 2 (require x reads in each of at least y samples)
keep <- rowSums(counts(dds) >= 20) >= 3
dds <- dds[keep,]
nrow(dds) #11718 > 10098
#pick vst transform
vsd <- vst(dds, blind = FALSE)
#calculate sample distances and use hclust to cluster samples based on dist
sampleDists <- dist(t(assay(vsd)), method = "euclidean") #chose vsd over rld
clust.dist <- hclust(sampleDists, method="ward.D2")
#get list order of clustered samples from hclust output
ord <- clust.dist$order
#convert original distance matrix to df, re-order, and tidy for plotting
sampleDists.df <- as.data.frame(as.matrix(sampleDists)) %>%
rownames_to_column(var = "sample")
sampleDists.df$sample <- factor(sampleDists.df$sample,
levels = c(sampleDists.df$sample[ord]),
labels = c("Body 1", "Body 2", "Body 3", "Head 1", "Head 2", "Head 3"))
sampleDists.df <- sampleDists.df %>%
pivot_longer(cols = 2:ncol(sampleDists.df),
names_to = "sample_2",
values_to = "dist")
sampleDists.df$sample_2 <- factor(sampleDists.df$sample_2,
levels = c(sampleDists.df$sample_2[ord]),
labels = c("Body 1", "Body 2", "Body 3", "Head 1", "Head 2", "Head 3"))
#plot heatmap cluster
pal <- wes_palette("Zissou1", 25, type = "continuous")
cluster.ht <- ggplot(sampleDists.df, aes(x = sample, y = sample_2, fill = dist)) +
theme_zlab() + xlab('') + ylab('') + labs(fill = "") +
geom_tile() +
scale_fill_gradientn(colours = pal)
cluster.ht
##########################################
## PCA analysis
##########################################
#Run PCA on vst transformed data and return output for ggplot
pca <- plotPCA(vsd, intgroup = c("cond"), returnData = TRUE)
percentVar <- round(100 * attr(pca, "percentVar"))
#plot pca
pca.ht <- ggplot(pca, aes(x = PC1, y = PC2, shape = cond)) +
geom_point(size =2.5, alpha = 0.75) +
theme_zlab_white() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
#scale_color_manual(values = c("#904494","#dfc765")) +
theme(legend.position= "top",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.margin=margin(-10,0,0,0),
legend.justification="center")
pca.ht
##########################################
# Identify DEGs
##########################################
gene_count <- as.matrix(counts.raw)
#Read in sample metadata df > samples
samples <- readRDS("deg/samples-ht.rds")
# run deseq to compare baselines (ctl) across strains
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
keep <- rowSums(counts(dds)) >= 30
dds <- dds[keep,]
dds <- DESeq(dds) #resultsNames(dds)
res <- results(dds, contrast = c("cond", "Head", "Body")) #summary(res)
res.df <- as.data.frame(res) %>%
rownames_to_column(var = "gene_id") %>%
arrange(padj) %>%
mutate(sig = ifelse((abs(log2FoldChange) > 1) & padj < 0.01, "yes", "no"))
saveRDS(res.df, "deg/ht.res.rds")
#Supplementary file
write.csv(res.df,"HeadBody_DEGs.csv", row.names = FALSE)
# get list of DEGs
degs <- res.df %>% filter(sig == "yes")
degs.head <- degs %>% filter(log2FoldChange >= 1)
RNAdata <- c("~/Box/ZamanianLab/SeqLibraries/Mapping/")
dir <- c("O001_BmAF_HT/190114_BCCV49ANXX/")
counts_dir <- paste0(RNAdata,dir,"counts/")
sample_list <- list.files(path = counts_dir, full.names = FALSE, recursive = TRUE)
#pull in gtf file of gene_ids and lengths
gtf <- read.csv(paste0(RNAdata,"auxillary/Bma.geneset.csv"), header=F)
sample_list <- list.files(path = counts_dir, full.names = FALSE, recursive = TRUE)
#pull in gtf file of gene_ids and lengths
gtf <- read.csv(paste0(RNAdata,"auxillary/Bma.geneset.csv"), header=F)
colnames(gtf) <- c("chr","start","end","strand","gene_id")
gtf <- gtf %>% mutate(gene_len = abs(end-start)) %>% select(gene_id,gene_len)
#create blank count table using first sample file to pull gene ids
counts <- read.csv(paste0(counts_dir,sample_list[1]), header=F, sep="\t") %>% dplyr::slice(-(1:4)) %>% select(1)
RNAdata <- c("~/Box/ZamanianLab/SeqLibraries/Mapping/")
dir <- c("O001_BmAF_HT/190114_BCCV49ANXX/")
counts_dir <- paste0(RNAdata,dir,"counts/")
sample_list <- list.files(path = counts_dir, full.names = FALSE, recursive = TRUE)
RNAdata <- c("~/Box/ZamanianLab/SeqLibraries/Mapping/")
dir <- c("O001_BmAF_HT/190114_BCCV49ANXX/")
counts_dir <- paste0(RNAdata,dir,"counts/")
sample_list <- list.files(path = counts_dir, full.names = FALSE, recursive = TRUE)
#pull in gtf file of gene_ids and lengths
gtf <- read.csv(paste0(RNAdata,"auxillary/Bma.geneset.csv"), header=F)
colnames(gtf) <- c("chr","start","end","strand","gene_id")
gtf <- gtf %>% mutate(gene_len = abs(end-start)) %>% select(gene_id,gene_len)
View(gtf)
RNAdata <- c("~/Box/ZamanianLab/SeqLibraries/Mapping/")
dir <- c("O001_BmAF_HT/190114_BCCV49ANXX/")
counts_dir <- paste0(RNAdata,dir,"counts/")
sample_list <- list.files(path = counts_dir, full.names = FALSE, recursive = TRUE)
#pull in gtf file of gene_ids and lengths
gtf <- read.csv(paste0(RNAdata,"auxillary/Bma.geneset.csv"), header=F)
colnames(gtf) <- c("chr","start","end","strand","gene_id")
View(gtf)
colnames(gtf) <- c("chr","start","end","strand","gene_id","transcript_id")
gtf <- gtf %>% mutate(gene_len = abs(end-start)) %>% select(gene_id,gene_len)
#create blank count table using first sample file to pull gene ids
counts <- read.csv(paste0(counts_dir,sample_list[1]), header=F, sep="\t") %>% dplyr::slice(-(1:4)) %>% select(1)
colnames(counts) <- c("gene_id")
#populate raw and tpm counts table
counts.raw <- counts
counts.tpm <- counts
for (i in sample_list){
print(i)
counts.i <- read.csv(paste0(counts_dir,i), header=F, sep="\t") %>% dplyr::slice(-(1:4))
colnames(counts.i) <- c("gene_id","count")
#add tpm column
counts.i <- left_join(counts.i, gtf, by = "gene_id") %>%
mutate(rpk = count / (1000*gene_len))
rpk_sum <- sum(counts.i$rpk, na.rm=TRUE)
counts.i <- counts.i %>%
mutate(tpm = 1000000*rpk / rpk_sum) %>%
select(gene_id,count,tpm)
#add raw count and tpm data to dfs
i <- str_replace(i, ".ReadsPerGene.tab","")
counts.raw.i <- counts.i %>% select(gene_id,count)
colnames(counts.raw.i) <- c("gene_id",i)
counts.raw <- left_join(counts.raw,counts.raw.i, by = "gene_id")
counts.tpm.i <- counts.i %>% select(gene_id,tpm)
colnames(counts.tpm.i) <- c("gene_id",i)
counts.tpm <- left_join(counts.tpm,counts.tpm.i, by = "gene_id")
}
# switch to long and add meta data
counts.raw <- counts.raw %>%
pivot_longer(2:ncol(counts.raw),
names_to = c("sample"),
names_pattern = ".*?_(.*?)_.*",
values_to = "expression")
counts.tpm <- counts.tpm %>%
pivot_longer(2:ncol(counts.tpm),
names_to = c("sample"),
names_pattern = ".*?_(.*?)_.*",
values_to = "expression")
# export
counts.raw$sample <- factor(counts.raw$sample)
saveRDS(counts.raw, "counts/ht.raw.rds")
counts.tpm$sample <- factor(counts.tpm$sample)
