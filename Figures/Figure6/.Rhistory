pivot_wider(names_from = sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
sample_list <- colnames(counts.raw)
sample_list
samples <- data.frame("sample_id" = sample_list, stringsAsFactors = FALSE)
samples <- samples %>%
mutate(cond = c("Pharynx", "Nonpharynx","Pharynx", "Nonpharynx","Pharynx", "Nonpharynx", "Nonpharynx", "Pharynx", "Nonpharynx", "Pharynx")) %>%
mutate(worm = c("1","1","2","2","3","3","4","4","5","5"))
samples$cond <- as.factor(samples$cond)
samples$worm <- as.factor(samples$worm)
saveRDS(samples, "deg/samples-lcm.rds")
View(samples)
gene_count <- as.matrix(counts.raw)
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
#filter 1 (require x reads total across all samples)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
#filter 2 (require x reads in each of at least y samples)
keep <- rowSums(counts(dds) >= 20) >= 3
dds <- dds[keep,]
nrow(dds) #11718 > 6075
#pick vst transform
vsd <- vst(dds, blind = FALSE)
#calculate sample distances and use hclust to cluster samples based on dist
sampleDists <- dist(t(assay(vsd)), method = "euclidean") #chose vsd over rld
clust.dist <- hclust(sampleDists, method="ward.D2")
#get list order of clustered samples from hclust output
ord <- clust.dist$order
#convert original distance matrix to df, re-order, and tidy for plotting
sampleDists.df <- as.data.frame(as.matrix(sampleDists)) %>%
rownames_to_column(var = "sample")
sampleDists.df$sample <- factor(sampleDists.df$sample,
levels = c(sampleDists.df$sample[ord]))
sampleDists.df <- sampleDists.df %>%
pivot_longer(cols = 2:ncol(sampleDists.df),
names_to = "sample_2",
values_to = "dist")
sampleDists.df$sample_2 <- factor(sampleDists.df$sample_2,
levels = c(sampleDists.df$sample_2[ord]))
#plot heatmap cluster
pal <- wes_palette("Zissou1", 25, type = "continuous")
cluster.pn <- ggplot(sampleDists.df, aes(x = sample, y = sample_2, fill = dist)) +
theme_zlab() + xlab('') + ylab('') + labs(fill = "") +
geom_tile() +
scale_fill_gradientn(colours = pal)
cluster.pn
#Run PCA on vst transformed data and return output for ggplot
pca <- plotPCA(vsd, intgroup = c("cond"), returnData = TRUE)
percentVar <- round(100 * attr(pca, "percentVar"))
#plot pca
pca.ht <- ggplot(pca, aes(x = PC1, y = PC2, shape = cond)) +
geom_point(size =2.5, alpha = 0.75) +
theme_zlab_white() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
#scale_color_manual(values = c("#904494","#dfc765")) +
theme(legend.position= "top",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.margin=margin(-10,0,0,0),
legend.justification="center")
#plot pca
pca.pn <- ggplot(pca, aes(x = PC1, y = PC2, shape = cond)) +
geom_point(size =2.5, alpha = 0.75) +
theme_zlab_white() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
#scale_color_manual(values = c("#904494","#dfc765")) +
theme(legend.position= "top",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.margin=margin(-10,0,0,0),
legend.justification="center")
pca.pn
gene_count <- as.matrix(counts.raw)
#Read in sample metadata df > samples
samples <- readRDS("deg/samples-lcm.rds")
# run deseq to compare baselines (ctl) across strains
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
keep <- rowSums(counts(dds)) >= 30
dds <- dds[keep,]
dds <- DESeq(dds) #resultsNames(dds)
res <- results(dds, contrast = c("cond", "Pharynx", "Nonpharynx")) #summary(res)
summary(res)
res.df <- as.data.frame(res) %>%
rownames_to_column(var = "gene_id") %>%
arrange(padj) %>%
mutate(sig = ifelse((abs(log2FoldChange) > 1) & padj < 0.01, "yes", "no"))
saveRDS(res.df, "deg/lcm.res.rds")
#Supplementary file
write.csv(res.df,"LCM_DEGs.csv", row.names = FALSE)
# get list of DEGs
degs <- res.df %>% filter(sig == "yes")
degs.pharynx <- degs %>% filter(log2FoldChange >= 1) #1077
View(degs.pharynx)
View(counts.raw)
degs.pharynx.list <- unique(degs.degs.pharynx$gene_id)
degs.pharynx.list <- unique(degs.pharynx$gene_id)
res.df <- readRDS("deg/lcm.res.rds")
# Prep TM(+) gene list
Bma.TM <- read.csv("/Users/mzamanian/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/RNAseq/Gene_Lists/Bma.TM.csv",
header = FALSE, sep = ",") %>%
dplyr::rename("protein_id" = V1, "gene_id" = V2, "gene_name" = V3, "TM_count" = V4)
# Join TM data and add columns for plotting
res.df <- left_join(res.df,Bma.TM, by="gene_id")
res.df <- res.df %>%
mutate(gene_name = str_replace(gene_name, "Bma-", "")) %>%
mutate(TM = ifelse(TM_count > 0,"yes","no"))
#Stats (how many significant upregulated and TM)
res.df.TM <- res.df %>% filter(log2FoldChange >= 1 & TM == "yes" & sig == "yes") #697
# Volcano plot
volcano.ht.ic <- ggplot(data=res.df, aes(x=log2FoldChange, y=-log10(padj))) +
theme_zlab_white() +
geom_vline(xintercept=c(0), col="gray") +
geom_vline(xintercept=c(-1, 1), linetype='dashed', col="black", size = 0.25) +
geom_hline(yintercept=2, linetype='dashed', col="black", size = 0.25) +
geom_point(data=subset(res.df, TM == "yes" & sig == "yes" & log2FoldChange >= 1), shape=16, colour ="#D1A86F", alpha=0.75, size=1) +
geom_point(data=subset(res.df, TM == "no" & log2FoldChange >= 1), shape=16, colour ="black", alpha=0.15, size=0.75) +
geom_point(data=subset(res.df, log2FoldChange < 1), shape=16, colour ="black", alpha=0.15, size=0.75) +
#geom_text_repel(data=subset(res.df, antigen == "1" & sig == "yes"),aes(label=gene_name, fontface=3),
#                 segment.alpha=0.4,segment.size=0.4, segment.color = "#6600CC",
#                 nudge_y=0,nudge_x=0, colour ="black", max.iter = 100000, max.overlaps = 20 , force = 3, size=3) +
annotate(geom="text", x=2, y= 120, label="Intestine-enriched",color="black", size = 4, hjust = 0) +
ylim(0,120) + xlim(-10,10) +
xlab(expression(log["2"]~'(Fold Change)')) + ylab(expression(-log["10"]~italic(P)))
# Volcano plot
volcano.pn <- ggplot(data=res.df, aes(x=log2FoldChange, y=-log10(padj))) +
theme_zlab_white() +
geom_vline(xintercept=c(0), col="gray") +
geom_vline(xintercept=c(-1, 1), linetype='dashed', col="black", size = 0.25) +
geom_hline(yintercept=2, linetype='dashed', col="black", size = 0.25) +
geom_point(data=subset(res.df, TM == "yes" & sig == "yes" & log2FoldChange >= 1), shape=16, colour ="#D1A86F", alpha=0.75, size=1) +
geom_point(data=subset(res.df, TM == "no" & log2FoldChange >= 1), shape=16, colour ="black", alpha=0.15, size=0.75) +
geom_point(data=subset(res.df, log2FoldChange < 1), shape=16, colour ="black", alpha=0.15, size=0.75) +
#geom_text_repel(data=subset(res.df, antigen == "1" & sig == "yes"),aes(label=gene_name, fontface=3),
#                 segment.alpha=0.4,segment.size=0.4, segment.color = "#6600CC",
#                 nudge_y=0,nudge_x=0, colour ="black", max.iter = 100000, max.overlaps = 20 , force = 3, size=3) +
annotate(geom="text", x=2, y= 120, label="Intestine-enriched",color="black", size = 4, hjust = 0) +
ylim(0,120) + xlim(-10,10) +
xlab(expression(log["2"]~'(Fold Change)')) + ylab(expression(-log["10"]~italic(P)))
volcano.pn
# Bma AF Pharynx/non-Pharynx (S01-S06) sample list
# (S01/S02 = pharynx 1 / non_pharynx 1 ...etc)
#sample_filter <- c('S01','S02','S03','S04','S05','S06')
sample_filter <- c('S01','S02','S03','S04','S05','S06')
# read in counts (raw) and filter and combine for samples from first two runs
counts_a.raw <- readRDS("data/counts-ic-lcm.raw.rds") %>%
filter(sample %in% sample_filter)
counts_b.raw <- readRDS("data/counts-ic-lcm_b.raw.rds") %>%
filter(sample %in% sample_filter)
View(counts_a.raw)
View(counts_b.raw)
# read in counts (raw) and filter and combine for samples from first two runs
counts_a.raw <- readRDS("data/counts-ic-lcm.raw.rds") %>%
filter(sample %in% sample_filter)
counts_b.raw <- readRDS("data/counts-ic-lcm_b.raw.rds") %>%
filter(sample %in% sample_filter)
counts.raw <- left_join(counts_a.raw,counts_b.raw, by = c("gene_id","sample"))
counts.raw[is.na(counts.raw)] = 0
counts.raw <- counts.raw %>%
mutate(expression = expression.x + expression.y) %>%
select(gene_id,sample,expression)
# read in counts (raw) and filter for sample (S1-S4) from second run (4 samples)
#S1_b/S2_b = non-pharynx/pharynx ...
counts_add.raw <- readRDS("data/lcm_b.raw.rds") %>%
mutate(sample = paste0(sample,"_b"))
#join all the samples
counts.raw <- rbind (counts.raw, counts_add.raw)
View(counts.raw)
# convert to matrix
counts.raw <- counts.raw %>%
pivot_wider(names_from = sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
# make metadata file
# make metadata file
sample_list <- colnames(counts.raw)
samples <- data.frame("sample_id" = sample_list, stringsAsFactors = FALSE)
samples <- samples %>%
mutate(cond = c("Pharynx", "Nonpharynx","Pharynx", "Nonpharynx","Pharynx", "Nonpharynx", "Nonpharynx", "Pharynx", "Nonpharynx", "Pharynx")) %>%
mutate(worm = c("1","1","2","2","3","3","4","4","5","5"))
samples$cond <- as.factor(samples$cond)
samples$worm <- as.factor(samples$worm)
saveRDS(samples, "deg/samples-lcm.rds")
saveRDS(samples, "deg/samples-ic.rds")
# read in sample metadata df > samples
samples <- readRDS("deg/samples-ic.rds")
# Bma AF Intestine/non-Intestine (S07-S12) sample list
# (S07/S08 = intestine 1 / non_intestine 1 ...etc)
sample_filter <- c('S07','S08','S09','S10','S11','S12')
# read in counts (raw) and filter for samples
counts_a.raw <- readRDS("data/counts-ic-lcm.raw.rds") %>%
filter(sample %in% sample_filter)
counts_b.raw <- readRDS("data/counts-ic-lcm_b.raw.rds") %>%
filter(sample %in% sample_filter)
counts.raw <- left_join(counts_a.raw,counts_b.raw, by = c("gene_id","sample"))
counts.raw[is.na(counts.raw)] = 0
counts.raw <- counts.raw %>%
mutate(expression = expression.x + expression.y) %>%
select(gene_id,sample,expression)
# convert to matrix
counts.raw <- counts.raw %>%
pivot_wider(names_from = sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
# make metadata file
sample_list <- colnames(counts.raw)
samples <- data.frame("sample_id" = sample_list, stringsAsFactors = FALSE)
samples <- samples %>%
mutate(cond = rep(c("Intestine", "N_Intestine"), times = 3)) %>%
mutate(worm = c("1","1","2","2","3","3"))
samples$cond <- as.factor(samples$cond)
samples$worm <- as.factor(samples$worm)
saveRDS(samples, "deg/samples-ic.rds")
# read in sample metadata df > samples
samples <- readRDS("deg/samples-ic.rds")
gene_count <- as.matrix(counts.raw)
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
#filter 1 (require x reads total across all samples)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
#filter 2 (require x reads in each of at least y samples)
keep <- rowSums(counts(dds) >= 20) >= 3
dds <- dds[keep,]
nrow(dds) #11718 > 6075
#pick vst transform
vsd <- vst(dds, blind = FALSE)
#calculate sample distances and use hclust to cluster samples based on dist
sampleDists <- dist(t(assay(vsd)), method = "euclidean") #chose vsd over rld
clust.dist <- hclust(sampleDists, method="ward.D2")
#get list order of clustered samples from hclust output
ord <- clust.dist$order
#convert original distance matrix to df, re-order, and tidy for plotting
sampleDists.df <- as.data.frame(as.matrix(sampleDists)) %>%
rownames_to_column(var = "sample")
sampleDists.df$sample <- factor(sampleDists.df$sample,
levels = c(sampleDists.df$sample[ord]),
labels = c("Non-Intestine 3", "Non_Intestine 1", "Non_Intestine 2", "Intestine 2", "Intestine 1", "Intestine 3"))
sampleDists.df <- sampleDists.df %>%
pivot_longer(cols = 2:ncol(sampleDists.df),
names_to = "sample_2",
values_to = "dist")
sampleDists.df$sample_2 <- factor(sampleDists.df$sample_2,
levels = c(sampleDists.df$sample_2[ord]),
labels = c("Non-Intestine 3", "Non_Intestine 1", "Non_Intestine 2", "Intestine 2", "Intestine 1", "Intestine 3"))
#plot heatmap cluster
pal <- wes_palette("Zissou1", 25, type = "continuous")
cluster.ic <- ggplot(sampleDists.df, aes(x = sample, y = sample_2, fill = dist)) +
theme_zlab() + xlab('') + ylab('') + labs(fill = "") +
geom_tile() +
scale_fill_gradientn(colours = pal)
cluster.ic
#Run PCA on vst transformed data and return output for ggplot
pca <- plotPCA(vsd, intgroup = c("cond"), returnData = TRUE)
percentVar <- round(100 * attr(pca, "percentVar"))
#plot pca
pca.ic <- ggplot(pca, aes(x = PC1, y = PC2, shape = cond)) +
geom_point(size =2.5, alpha = 0.75) +
theme_zlab_white() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
#scale_color_manual(values = c("#904494","#dfc765")) +
theme(legend.position= "top",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.margin=margin(-10,0,0,0),
legend.justification="center")
pca.ic
gene_count <- as.matrix(counts.raw)
#Read in sample metadata df > samples
samples <- readRDS("deg/samples-ic.rds")
# run deseq to compare baselines (ctl) across strains
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
keep <- rowSums(counts(dds)) >= 30
dds <- dds[keep,]
dds <- DESeq(dds) #resultsNames(dds)
res <- results(dds, contrast = c("cond", "Intestine", "N_Intestine")) #summary(res)
res.df <- as.data.frame(res) %>%
rownames_to_column(var = "gene_id") %>%
arrange(padj) %>%
mutate(sig = ifelse((abs(log2FoldChange) > 1) & padj < 0.01, "yes", "no"))
saveRDS(res.df, "deg/ic.res.rds")
#Supplementary file
write.csv(res.df,"IC_DEGs.csv", row.names = FALSE)
# get list of DEGs
degs <- res.df %>% filter(sig == "yes")
degs.intestine <- degs %>% filter(log2FoldChange >= 1) #1077
degs.intestine.list <- unique(degs.intestine$gene_id)
res.df <- readRDS("deg/ic.res.rds")
# Prep TM(+) gene list
Bma.TM <- read.csv("/Users/mzamanian/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/RNAseq/Gene_Lists/Bma.TM.csv",
header = FALSE, sep = ",") %>%
dplyr::rename("protein_id" = V1, "gene_id" = V2, "gene_name" = V3, "TM_count" = V4)
# Join TM data and add columns for plotting
res.df <- left_join(res.df,Bma.TM, by="gene_id")
res.df <- res.df %>%
mutate(gene_name = str_replace(gene_name, "Bma-", "")) %>%
mutate(TM = ifelse(TM_count > 0,"yes","no"))
#Stats (how many significant upregulated and TM)
res.df.TM <- res.df %>% filter(log2FoldChange >= 1 & TM == "yes" & sig == "yes") #697
library(tidyverse)
library(cowplot)
library(ggrepel)
library("ZamanianLabThemes")
library(paletteer)
library(DESeq2)
library(hexbin)
library(wesanderson)
setwd("~/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/Figures/Figure6")
theme_zlab_white = function(base_size = 12, base_family = "Helvetica") {
theme_bw(base_size = base_size, base_family = base_family) %+replace%
theme(
# Specify axis options
axis.line = element_blank(),
#axis.line = element_line(color = "black"),
axis.text.x = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.text.y = element_text(size = base_size*0.8, color = "black", lineheight = 0.9),
axis.ticks = element_line(color = "black", size  =  0.4),
axis.title.x = element_text(size = base_size, color = "black", margin = margin(0, 10, 0, 0)),
axis.title.y = element_text(size = base_size, color = "black", angle = 90, margin = margin(0, 10, 0, 0)),
axis.ticks.length = unit(0.3, "lines"),
# Specify legend options
legend.background = element_rect(color = NA, fill = "white"),
legend.key = element_rect(color = "white",  fill = "white"),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = base_size*0.8, color = "black"),
legend.title = element_text(size = base_size*0.8, face = "bold", hjust = 0, color = "black"),
legend.position = "right",
legend.text.align = NULL,
legend.title.align = NULL,
legend.direction = "vertical",
legend.box = NULL,
# Specify panel options
panel.background = element_rect(fill = "white", color  =  NA),
panel.border = element_rect(fill = NA, color = "black"),
#panel.border = element_blank(),
#panel.grid.major = element_line(color = "black"),
panel.grid.major = element_blank(),
#panel.grid.minor = element_line(color = "black"),
panel.grid.minor = element_blank(),
panel.spacing = unit(0.5, "lines"),
# Specify faceting options
strip.background = element_rect(fill = "white", color = "white"),
strip.text.x = element_text(size = base_size*0.8, color = "black"),
strip.text.y = element_text(size = base_size*0.8, color = "black",angle = -90),
# Specify plot options
plot.background = element_rect(colour = NA, fill = NA),
plot.title = element_text(size = base_size*1.2, color = "black"),
plot.margin = unit(rep(1, 4), "lines")
)
}
############
## Fig6.ill: illustration of lcm / intestine dissections
############
library(magick)
library(pdftools)
library(grConvert)
library(grImport2)
RNA.illustration <- image_read_pdf("~/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/RNAseq/LCM_Pharynx/Illustration_IntestinePharynx.pdf", density = 300)
Fig6.ill <- ggdraw() +
draw_image(RNA.illustration, scale = 1)
##########################################
### Intestine / non-Intestine analysis (DESeq/Volcano Plot)
##########################################
# Bma AF Intestine/non-Intestine (S07-S12) sample list
# (S07/S08 = intestine 1 / non_intestine 1 ...etc)
sample_filter <- c('S07','S08','S09','S10','S11','S12')
# read in counts (raw) and filter for samples
counts_a.raw <- readRDS("data/counts-ic-lcm.raw.rds") %>%
filter(sample %in% sample_filter)
counts_b.raw <- readRDS("data/counts-ic-lcm_b.raw.rds") %>%
filter(sample %in% sample_filter)
counts.raw <- left_join(counts_a.raw,counts_b.raw, by = c("gene_id","sample"))
counts.raw[is.na(counts.raw)] = 0
counts.raw <- counts.raw %>%
mutate(expression = expression.x + expression.y) %>%
select(gene_id,sample,expression)
# convert to matrix
counts.raw <- counts.raw %>%
pivot_wider(names_from = sample, values_from = expression) %>%
column_to_rownames(var = "gene_id")
# make metadata file
sample_list <- colnames(counts.raw)
samples <- data.frame("sample_id" = sample_list, stringsAsFactors = FALSE)
samples <- samples %>%
mutate(cond = rep(c("Intestine", "N_Intestine"), times = 3)) %>%
mutate(worm = c("1","1","2","2","3","3"))
samples$cond <- as.factor(samples$cond)
samples$worm <- as.factor(samples$worm)
saveRDS(samples, "deg/samples-ic.rds")
# read in sample metadata df > samples
samples <- readRDS("deg/samples-ic.rds")
##########################################
## Transform and Cluster Samples
##########################################
gene_count <- as.matrix(counts.raw)
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
#filter 1 (require x reads total across all samples)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
#filter 2 (require x reads in each of at least y samples)
keep <- rowSums(counts(dds) >= 20) >= 3
dds <- dds[keep,]
nrow(dds) #11718 > 6075
#pick vst transform
vsd <- vst(dds, blind = FALSE)
#calculate sample distances and use hclust to cluster samples based on dist
sampleDists <- dist(t(assay(vsd)), method = "euclidean") #chose vsd over rld
clust.dist <- hclust(sampleDists, method="ward.D2")
#get list order of clustered samples from hclust output
ord <- clust.dist$order
#convert original distance matrix to df, re-order, and tidy for plotting
sampleDists.df <- as.data.frame(as.matrix(sampleDists)) %>%
rownames_to_column(var = "sample")
sampleDists.df$sample <- factor(sampleDists.df$sample,
levels = c(sampleDists.df$sample[ord]),
labels = c("Non-Intestine 3", "Non_Intestine 1", "Non_Intestine 2", "Intestine 2", "Intestine 1", "Intestine 3"))
sampleDists.df <- sampleDists.df %>%
pivot_longer(cols = 2:ncol(sampleDists.df),
names_to = "sample_2",
values_to = "dist")
sampleDists.df$sample_2 <- factor(sampleDists.df$sample_2,
levels = c(sampleDists.df$sample_2[ord]),
labels = c("Non-Intestine 3", "Non_Intestine 1", "Non_Intestine 2", "Intestine 2", "Intestine 1", "Intestine 3"))
#plot heatmap cluster
pal <- wes_palette("Zissou1", 25, type = "continuous")
cluster.ic <- ggplot(sampleDists.df, aes(x = sample, y = sample_2, fill = dist)) +
theme_zlab() + xlab('') + ylab('') + labs(fill = "") +
geom_tile() +
scale_fill_gradientn(colours = pal)
cluster.ic
##########################################
## PCA analysis
##########################################
#Run PCA on vst transformed data and return output for ggplot
pca <- plotPCA(vsd, intgroup = c("cond"), returnData = TRUE)
percentVar <- round(100 * attr(pca, "percentVar"))
#plot pca
pca.ic <- ggplot(pca, aes(x = PC1, y = PC2, shape = cond)) +
geom_point(size =2.5, alpha = 0.75) +
theme_zlab_white() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
#scale_color_manual(values = c("#904494","#dfc765")) +
theme(legend.position= "top",
legend.direction = "horizontal",
legend.title = element_blank(),
legend.margin=margin(-10,0,0,0),
legend.justification="center")
pca.ic
##########################################
# Identify DEGs
##########################################
gene_count <- as.matrix(counts.raw)
#Read in sample metadata df > samples
samples <- readRDS("deg/samples-ic.rds")
# run deseq to compare baselines (ctl) across strains
dds <- DESeqDataSetFromMatrix(countData = gene_count, colData = samples, design = ~ cond + worm)
keep <- rowSums(counts(dds)) >= 30
dds <- dds[keep,]
dds <- DESeq(dds) #resultsNames(dds)
res <- results(dds, contrast = c("cond", "Intestine", "N_Intestine")) #summary(res)
res.df <- as.data.frame(res) %>%
rownames_to_column(var = "gene_id") %>%
arrange(padj) %>%
mutate(sig = ifelse((abs(log2FoldChange) > 1) & padj < 0.01, "yes", "no"))
saveRDS(res.df, "deg/ic.res.rds")
#Supplementary file
write.csv(res.df,"IC_DEGs.csv", row.names = FALSE)
# get list of DEGs
degs <- res.df %>% filter(sig == "yes")
degs.intestine <- degs %>% filter(log2FoldChange >= 1) #1077
degs.intestine.list <- unique(degs.intestine$gene_id)
##########################################
# Annotated Volcano Plot
##########################################
res.df <- readRDS("deg/ic.res.rds")
# Prep TM(+) gene list
Bma.TM <- read.csv("/Users/mzamanian/Box/ZamanianLab/Data/Airs_Experiments/Bm_spatial_trans-ms/RNAseq/Gene_Lists/Bma.TM.csv",
header = FALSE, sep = ",") %>%
dplyr::rename("protein_id" = V1, "gene_id" = V2, "gene_name" = V3, "TM_count" = V4)
# Join TM data and add columns for plotting
res.df <- left_join(res.df,Bma.TM, by="gene_id")
res.df <- res.df %>%
mutate(gene_name = str_replace(gene_name, "Bma-", "")) %>%
mutate(TM = ifelse(TM_count > 0,"yes","no"))
#Stats (how many significant upregulated and TM)
res.df.TM <- res.df %>% filter(log2FoldChange >= 1 & TM == "yes" & sig == "yes") #697
# Volcano plot
volcano.ic <- ggplot(data=res.df, aes(x=log2FoldChange, y=-log10(padj))) +
theme_zlab_white() +
geom_vline(xintercept=c(0), col="gray") +
geom_vline(xintercept=c(-1, 1), linetype='dashed', col="black", size = 0.25) +
geom_hline(yintercept=2, linetype='dashed', col="black", size = 0.25) +
geom_point(data=subset(res.df, TM == "yes" & sig == "yes" & log2FoldChange >= 1), shape=16, colour ="#D1A86F", alpha=0.75, size=1) +
geom_point(data=subset(res.df, TM == "no" & log2FoldChange >= 1), shape=16, colour ="black", alpha=0.15, size=0.75) +
geom_point(data=subset(res.df, log2FoldChange < 1), shape=16, colour ="black", alpha=0.15, size=0.75) +
#geom_text_repel(data=subset(res.df, antigen == "1" & sig == "yes"),aes(label=gene_name, fontface=3),
#                 segment.alpha=0.4,segment.size=0.4, segment.color = "#6600CC",
#                 nudge_y=0,nudge_x=0, colour ="black", max.iter = 100000, max.overlaps = 20 , force = 3, size=3) +
annotate(geom="text", x=2, y= 120, label="Intestine-enriched",color="black", size = 4, hjust = 0) +
ylim(0,120) + xlim(-10,10) +
xlab(expression(log["2"]~'(Fold Change)')) + ylab(expression(-log["10"]~italic(P)))
volcano.ic
